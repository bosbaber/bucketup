#
name: Test and build Docker image and Helm chart

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
    tags:
      - '*'


env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    name: Build image and test chart on Kind
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # - name: Set up Kind
      #   uses: engineerd/setup-kind@v0.6.2

      # - name: Set up kubectl
      #   uses: azure/setup-kubectl@v3

      - name: Build Docker image (local, do not push)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          push: false
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ci

      # - name: Load image into Kind
      #   run: |
      #     kind load docker-image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ci

      # - name: Set up Helm
      #   uses: azure/setup-helm@v3

      # - name: Install chart into Kind (override image tag) and collect debug info on failure
      #   run: |
      #     set -euxo pipefail
          
      #     helm dep update

      #     echo "Rendering chart for troubleshooting purposes"
      #     helm template bucketup . --namespace test --create-namespace -f testing/test-values.yaml

      #     echo "Installing chart into Kind"
      #     helm install bucketup . --namespace test --create-namespace --wait --timeout 5m --debug --atomic -f testing/test-values.yaml
 

      # - name: Wait for patched pod to be ready
      #   run: |
      #     kubectl -n test rollout status deploy -l app.kubernetes.io/instance=bucketup --timeout=180s
      #     kubectl -n test wait --for=condition=ready pod -l app.kubernetes.io/instance=bucketup --timeout=180s

      # - name: Test service
      #   run: |
      #     # Port forward the service to localhost
      #     kubectl -n test port-forward svc/bucketup-service 8080:8080 &
      #     # Wait for the port forward to be established
      #     sleep 20
      #     kubectl -n test get deployments
      #     # Get all logs for the bucketup deployment
      #     kubectl -n test logs deployment/bucketup --all-containers=true
      #     # Do the health check manually
      #     curl -sfS http://127.0.0.1:8080/healthz                    
      #     # Test the service
      #       # Test the service and verify response contains "Hello, bucketup!"
      #       RESPONSE=$(curl -sfS http://127.0.0.1:8080/ --max-time 10)
      #       echo "$RESPONSE"
      #       echo "$RESPONSE" | grep -q "Hello, bucketup!"

      # - name: Dump K8s diagnostics (on failure)
      #   if: ${{ failure() }}
      #   run: |
      #     set -x
      #     kubectl -n test get all
      #     kubectl -n test get events --sort-by=.lastTimestamp | tail -200
      #     kubectl -n test describe deploy,sts,ds,svc,ingress,po
      #     # Logs for all pods
      #     for p in $(kubectl -n test get po -o name); do kubectl -n test logs "$p" --all-containers=true --tail=200 || true; done                  

  build-and-push-image:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.8.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  publish-chart:
    name: Publish Helm chart
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
    permissions:
      contents: write   # must be write to push to the repo
      packages: write
    steps:
      - name: Checkout repository (full history so we can switch branches)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: true  # uses GITHUB_TOKEN for pushes

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Derive chart version from tag (strip leading "v" if present)
        id: ver
        run: |
          RAW="${{ github.ref_name }}"
          CLEAN="${RAW#v}"         # strip leading v
          echo "raw=$RAW" >> "$GITHUB_OUTPUT"
          echo "clean=$CLEAN" >> "$GITHUB_OUTPUT"

      - name: Package chart
        run: |
          # Patch Chart.yaml with version and appVersion
          sed -i "s/^version: .*/version: ${{ steps.ver.outputs.clean }}/" Chart.yaml
          sed -i "s/^appVersion: .*/appVersion: \"v${{ steps.ver.outputs.clean }}\"/" Chart.yaml
          # Package the chart into the tmp directory
          mkdir -p tmp
          helm dep update .
          helm package . \
            --version "${{ steps.ver.outputs.clean }}" \
            --app-version "${{ steps.ver.outputs.raw }}" \
            -d tmp
          
          # undo the Chart.yaml changes
          git checkout -- .
          # Make sure tmp is stil there
          ls tmp

      - name: Switch to 'serve' branch (create if it doesn't exist)
        run: |
          git fetch origin
          if git show-ref --verify --quiet refs/remotes/origin/serve; then
            git checkout -B serve origin/serve
          else
            git checkout --orphan serve
            rm -rf .
            mkdir -p docs
            git add docs
            git commit --allow-empty -m "Initialize serve branch"
          fi

      - name: Move packaged chart into docs/
        run: |
          mkdir -p docs
          mv tmp/*.tgz docs/

      - name: Regenerate Helm repo index (preserve existing index)
        run: |
          URL="https://bosbaber.github.io/bucketup/"
          if [ -f docs/index.yaml ]; then
            helm repo index docs --url "$URL" --merge docs/index.yaml
          else
            helm repo index docs --url "$URL"
          fi

      - name: Configure git and push
        env:
          GIT_AUTHOR_NAME: GitHub Actions
          GIT_AUTHOR_EMAIL: actions@github.com
          GIT_COMMITTER_NAME: GitHub Actions
          GIT_COMMITTER_EMAIL: actions@github.com
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add docs
          git commit -m "Update Helm chart to version ${{ steps.ver.outputs.raw }}" || echo "No changes to commit."
          # ensure remote uses token from checkout (persist-credentials: true)
          git push origin serve
